# Load packages
# devtools::install_github("thomasp85/patchwork")
pacman::p_load(tidyverse,# tidy family and related pacakges below
readxl,  #reding in Excel file
metafor, # calculating effect sizes
magrittr, # extending piping
ggplot2,  # nice plots
patchwork,  # arranging plots
hrbrthemes # nice themes for ggplots
)
# Load custom functions
#source("../functions.R") #load custom functions
#Load environment
#load('myEnvironment.RData')
#Load Data
#data_all <- read_excel("../data/ALL_TRAITS_20200514.xlsx", sheet = "main")
data_all <- read_excel("../data/ALL_TRAITS_20200514_REVISED.xlsx", sheet = "main")
#Need to import newly revised data
#data_all <- read_excel("../data/ALL_TRAITS.xlsx")
#str(data_all)
# taking a quick look
glimpse(data_all)
# Change spelling in one column
data_all$Exposure_Type <- gsub("One off", "One-off", data_all$Exposure_Type)
#add first colum with ID for each row (to be used as ID for each clculated effect size)
add_column(data_all, ES_ID = paste("ES_",c(1:dim(data_all)[1]),sep=""), .before = 1) -> data_all
# Change all character columns into factors
data_all %>% type.convert() -> data_all
#names(data_all)
#colnames(data_all)
# Calculate lnRR and its variance for each row ("ROM" is the log transformed ratio of means (Hedges et al., 1999; Lajeunesse, 2011))
data_all <- escalc(measure="ROM", m1i=Mean_Treatment, sd1i=SD_Treatment, n1i=Sample_Size_n_Treatment, m2i=Mean_Control, sd2i=SD_Control, n2i=Sample_Size_n_Control, var.names=c("lnRR","VlnRR"), data=data_all)
# Calculate lnCVR and its variance for each row ("ROM" is the llog transformed coefficient of variation ratio (akagawa et al., 2015))
data_all <- escalc(measure="CVR", m1i=Mean_Treatment, sd1i=SD_Treatment, n1i=Sample_Size_n_Treatment, m2i=Mean_Control, sd2i=SD_Control, n2i=Sample_Size_n_Control, var.names=c("lnCVR","VlnCVR"), data=data_all)
#str(data_all)
#hist(data_all$lnRR)
#hist(data_all$VlnRR)
#hist(data_all$lnCVR)
#hist(data_all$VlnCVR)
#Check for missing values in each column of the data frame:
colSums(is.na(data_all)) #gives N of missing (NA)
# Save data with effect sizes
write.csv(data_all, file ="../Data/data_all_ES.csv")
save(data_all, file = "../Rdata/data_all_ES.RData")
# Subset by One off and Multigenerational
data_MG <- filter(data_all, Exposure_Type == "Multigenerational")
data_OF <- filter(data_all, Exposure_Type == "One-off")
dim(data_MG)
dim(data_OF)
data_MG <- droplevels(data_MG) #adjust factor levels
data_OF <- droplevels(data_OF) #adjust factor levels
par(mfrow=c(3,2))
#par(mar=c(4,10,2,0))
## all data
plot(jitter(data_all$lnRR), jitter(sqrt(1/data_all$VlnRR)), cex=0.75,  xlab="lnRR", ylab="Precision (1/SE)", main="all data", xlim=c(-1.1,4.1), ylim=c(0,110))
abline(v=0, lwd=0.5)
plot(jitter(data_all$lnCVR), jitter(sqrt(1/data_all$VlnCVR)), cex=0.75,  xlab="lnCVR", ylab="Precision (1/SE)", main="all data", xlim=c(-3,2), ylim=c(1,7))
abline(v=0, lwd=0.5)
## OF data
plot(jitter(data_OF$lnRR), jitter(sqrt(1/data_OF$VlnRR)), cex=0.75,  xlab="lnRR", ylab="Precision (1/SE)", main="OF data", xlim=c(-1.1,4.1), ylim=c(0,110))
abline(v=0, lwd=0.5)
plot(jitter(data_OF$lnCVR), jitter(sqrt(1/data_OF$VlnCVR)), cex=0.75,  xlab="lnCVR", ylab="Precision (1/SE)", main="OF data", xlim=c(-3,2), ylim=c(1,7))
abline(v=0, lwd=0.5)
## MG data
plot(jitter(data_MG$lnRR), jitter(sqrt(1/data_MG$VlnRR)), cex=0.75,  xlab="lnRR", ylab="Precision (1/SE)", main="MG data", xlim=c(-1.1,4.1), ylim=c(0,110))
abline(v=0, lwd=0.5)
plot(jitter(data_MG$lnCVR), jitter(sqrt(1/data_MG$VlnCVR)), cex=0.75,  xlab="lnCVR", ylab="Precision (1/SE)", main="MG data", xlim=c(-3,2), ylim=c(1,7))
abline(v=0, lwd=0.5)
#filter out two odd points - CHECK!
data_all %>% filter(sqrt(1/data_all$VlnRR)>100) #ES_5 Adedeji2019 F2 males Body_Weight 84 days Table 1 -> checked, correct
data_all %>% filter(lnRR>2 & sqrt(1/data_all$VlnRR)>10) #ES_59 Ding2014 F2 Female Adiposity Parametrial Fat Weight Supp Table and Fig 1b -> checked, correct, but still odd
#these plots are quite big, so will not include them in the knitted document
## OF dataset
library(GGally) # for pairwise plots
data_OF %>% ggcorr(palette = "RdBu", label = TRUE) #correlation matrix of all variables
data_OF %>% select(Treatment_Diet_Energy_kcal_g, Treatment_Diet_Prot_pE, Treatment_Diet_Carb_pE, Treatment_Diet_Fat_pE, Treatment_Diet_PC_ratio, Treatment_Diet_PNP_ratio, Treatment_Start_F0, Treatment_End_F0, Treatment_Duration_F0) %>% ggpairs() #correlations and distributions of treatment-related continous variables
## MG dataset
library(GGally) # for pairwise plots
data_MG %>% ggcorr(palette = "RdBu", label = TRUE) #correlation matrix of all variables
data_MG %>% select(Treatment_Diet_Energy_kcal_g, Treatment_Diet_Prot_pE, Treatment_Diet_Carb_pE, Treatment_Diet_Fat_pE, Treatment_Diet_PC_ratio, Treatment_Diet_PNP_ratio, Treatment_Start_F0, Treatment_End_F0, Treatment_Duration_F0) %>% ggpairs() #correlations and distributions of treatment-related continous variables
# Create quick simple factor tables with numbers of effect sizes per level
#table(data_all$Paper_ID)
#table(data_all$Study_ID)
#table(data_all$Trait)
#table(data_all$Rodent_Type)
#table(data_all$Rodent_Strain)
#table(data_all$Exposure_Type)
#table(data_all$F0_Parent_Exposed)
#table(data_all$Offspring_Generation)
#table(data_all$Offspring_Sex)
#table(data_all$Diet_at_Measurement)
#table(data_all$Lineage_HFD)
#table(data_all$Treatment_Diet_Code)
#hist(data_all$Year)
#hist(data_all$Age_at_Measurement_Days)
#hist(data_all$Treatment_Start_F0)
#hist(data_all$Treatment_End_F0)
#hist(data_all$Treatment_Duration_F0)
#hist(data_all$Treatment_Diet_PC_ratio)
#hist(data_all$Treatment_Diet_PNP_ratio)
#hist(data_all$Treatment_Diet_Fat_pE)
#hist(data_all$Treatment_Diet_Energy_kcal_g)
# Vectors with number of papers per level - all data
N_papers_Trait <- colSums(table(data_all$Paper_ID, data_all$Trait)!=0)
N_papers_Rodent_Type <- colSums(table(data_all$Paper_ID, data_all$Rodent_Type)!=0)
N_papers_Rodent_Strain <- colSums(table(data_all$Paper_ID, data_all$Rodent_Strain)!=0)
N_papers_Exposure <- colSums(table(data_all$Paper_ID, data_all$Exposure_Type)!=0)
N_papers_F0_Parent_Exposed <- colSums(table(data_all$Paper_ID, data_all$F0_Parent_Exposed)!=0)
N_papers_Offspring_Generation <- colSums(table(data_all$Paper_ID, data_all$Offspring_Generation)!=0)
N_papers_Offspring_Sex <- colSums(table(data_all$Paper_ID, data_all$Offspring_Sex)!=0)
N_papers_Offspring_Diet <- colSums(table(data_all$Paper_ID, data_all$Diet_at_Measurement)!=0)
N_papers_Lineage_HFD <- colSums(table(data_all$Paper_ID, data_all$Lineage_HFD)!=0)
range(data_all$Treatment_Diet_PC_ratio)
range(data_all$Treatment_Diet_PNP_ratio)
range(data_all$Treatment_Diet_Fat_pE)
range(data_all$Treatment_Diet_Energy_kcal_g)
#colSums(table(data_all$Paper_ID, data_all$Year)!=0) #how many papers by Year
# Vectors with number of papers per level - One-off data
N_papers_Trait_OF <- colSums(table(data_OF$Paper_ID, data_OF$Trait)!=0)
N_papers_Rodent_Type_OF <- colSums(table(data_OF$Paper_ID, data_OF$Rodent_Type)!=0)
N_papers_Rodent_Strain_OF <- colSums(table(data_OF$Paper_ID, data_OF$Rodent_Strain)!=0)
N_papers_Exposure_OF <- colSums(table(data_OF$Paper_ID, data_OF$Exposure_Type)!=0)
N_papers_F0_Parent_Exposed_OF <- colSums(table(data_OF$Paper_ID, data_OF$F0_Parent_Exposed)!=0)
N_papers_Offspring_Generation_OF <- colSums(table(data_OF$Paper_ID, data_OF$Offspring_Generation)!=0)
N_papers_Offspring_Sex_OF <- colSums(table(data_OF$Paper_ID, data_OF$Offspring_Sex)!=0)
N_papers_Offspring_Diet_OF <- colSums(table(data_OF$Paper_ID, data_OF$Diet_at_Measurement)!=0)
N_papers_Lineage_HFD_OF <- colSums(table(data_OF$Paper_ID, data_OF$Lineage_HFD)!=0)
range(data_OF$Treatment_Diet_PC_ratio)
range(data_OF$Treatment_Diet_PNP_ratio)
range(data_OF$Treatment_Diet_Fat_pE)
range(data_OF$Treatment_Diet_Energy_kcal_g)
#colSums(table(data_OF$Paper_ID, data_OF$Year)!=0) #how many papers by Year
# Vectors with number of papers per level - Multigenerational data
N_papers_Trait_MG <- colSums(table(data_MG$Paper_ID, data_MG$Trait)!=0)
N_papers_Rodent_Type_MG <- colSums(table(data_MG$Paper_ID, data_MG$Rodent_Type)!=0)
N_papers_Rodent_Strain_MG <- colSums(table(data_MG$Paper_ID, data_MG$Rodent_Strain)!=0)
N_papers_Exposure_MG <- colSums(table(data_MG$Paper_ID, data_MG$Exposure_Type)!=0)
N_papers_F0_Parent_Exposed_MG <- colSums(table(data_MG$Paper_ID, data_MG$F0_Parent_Exposed)!=0)
N_papers_Offspring_Generation_MG <- colSums(table(data_MG$Paper_ID, data_MG$Offspring_Generation)!=0)
N_papers_Offspring_Sex_MG <- colSums(table(data_MG$Paper_ID, data_MG$Offspring_Sex)!=0)
N_papers_Offspring_Diet_MG <- colSums(table(data_MG$Paper_ID, data_MG$Diet_at_Measurement)!=0)
N_papers_Lineage_HFD_MG <- colSums(table(data_MG$Paper_ID, data_MG$Lineage_HFD)!=0)
range(data_MG$Treatment_Diet_PC_ratio)
range(data_MG$Treatment_Diet_PNP_ratio)
range(data_MG$Treatment_Diet_Fat_pE)
range(data_MG$Treatment_Diet_Energy_kcal_g)
#colSums(table(data_MG$Paper_ID, data_MG$Year)!=0) #how many papers by Year
## for Figure1
#N_papers_Exposure #N papers
#colSums(table(data_all$Study_ID, data_all$Exposure_Type)!=0) #N studies
#table(data_all$Exposure_Type) #N effect sizes
#sum(na.omit(data_all$Sample_Size_n_Treatment)) # calculate total number of treatment individuals used NOT taking into account multiple measurements
#sum(na.omit(data_all$Sample_Size_n_Control)) # calculate total number of contol individuals in the data_all set if control sharing NOT taken into account and NOT taking into account multiple measurements
N_unique_animals_Treatment <- sum(na.omit(data_all[!duplicated(data_all[,"Cohort_ID"]), "Sample_Size_n_Treatment"])) # calculate total number of treatment individuals used taking into account multiple measurements #1121
#sum(na.omit(data_all[!duplicated(data_all[,"Cohort_ID_Control"]), "Sample_Size_n_Control"])) # calculate total number of contol individuals in the data_all set if control sharing NOT taken into account but taking into account multiple measurements #1371
N_unique_animals_Control <- sum(na.omit(data_all[!duplicated(data_all[ ,"Cohort_ID_Control"]) & !duplicated(data_all[ ,"Cohort_ID"]), "Sample_Size_n_Control"])) # calculate CORRECT total number of contol individuals in the data_all set controlling for control sharing #1060
N_unique_animals <- c(N_unique_animals_Treatment, N_unique_animals_Control)
save(N_papers_Exposure, N_papers_Rodent_Type, N_papers_F0_Parent_Exposed, N_papers_Offspring_Generation, N_papers_Offspring_Sex, N_papers_Trait, N_unique_animals, file = "../Rdata/data_summaries.Rdata")
#https://bookdown.org/lyzhang10/lzhang_r_tips_book/how-to-plot-data.html
#colors: OF - "#56B4E9", MG - "#E69F00"
table(data_all$F0_Parent_Exposed, data_all$Exposure_Type)
# prepare data for plotting
plotting_df <-
data_all %>%
group_by(F0_Parent_Exposed, Exposure_Type) %>%
summarise(Freq = n()) %>%
# a trick!
mutate(Freq = if_else(Exposure_Type == "One-off", -Freq, Freq))
## find the order of F0_Parent_Exposeds by the N
temp_df <-
plotting_df %>%
filter(Exposure_Type == "One-off") %>%
arrange(Freq)
the_order <- rev(temp_df$F0_Parent_Exposed)
p_F0_Parent_Exposed <-
plotting_df %>%
ggplot(aes(x = F0_Parent_Exposed, y = Freq, group = Exposure_Type, fill = Exposure_Type)) +
geom_bar(stat = "identity", width = 0.5) +
coord_flip() +
scale_x_discrete(limits = the_order) + #used ordered F0_Parent_Exposeds - use for single axis
scale_y_continuous(breaks = seq(-200, 200, 50),
labels = abs(seq(-200, 200, 50)), limits = c(-210, 210)) +
labs(x = "F0_Parent_Exposed", y = "N effect sizes", title = "Number of effect sizes by F0_Parent_Exposed") +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill =  "white"),
panel.grid.major.x = element_line("grey")) +
scale_fill_manual(values=c("#56B4E9", "#E69F00"),   # change the default colors of bars
name="",
breaks=c("One-off", "Multigenerational"),
labels=c("One-off", "Multigenerational"))
print(p_F0_Parent_Exposed)
#https://bookdown.org/lyzhang10/lzhang_r_tips_book/how-to-plot-data.html
#colors: OF - "#56B4E9", MG - "#E69F00"
table(data_all$Offspring_Sex, data_all$Exposure_Type)
# prepare data for plotting
plotting_df <-
data_all %>%
group_by(Offspring_Sex, Exposure_Type) %>%
summarise(Freq = n()) %>%
# a trick!
mutate(Freq = if_else(Exposure_Type == "One-off", -Freq, Freq))
## find the order of Offspring_Sexs by the N
temp_df <-
plotting_df %>%
filter(Exposure_Type == "One-off") %>%
arrange(Freq)
the_order <- rev(temp_df$Offspring_Sex)
p_Offspring_Sex <-
plotting_df %>%
ggplot(aes(x = Offspring_Sex, y = Freq, group = Exposure_Type, fill = Exposure_Type)) +
geom_bar(stat = "identity", width = 0.5) +
coord_flip() +
scale_x_discrete(limits = the_order) + #used ordered Offspring_Sexs - use for single axis
scale_y_continuous(breaks = seq(-200, 200, 50),
labels = abs(seq(-200, 200, 50)), limits = c(-210, 210)) +
labs(x = "Offspring_Sex", y = "N effect sizes", title = "Number of effect sizes by Offspring_Sex") +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill =  "white"),
panel.grid.major.x = element_line("grey")) +
scale_fill_manual(values=c("#56B4E9", "#E69F00"),   # change the default colors of bars
name="",
breaks=c("One-off", "Multigenerational"),
labels=c("One-off", "Multigenerational"))
print(p_Offspring_Sex)
#https://bookdown.org/lyzhang10/lzhang_r_tips_book/how-to-plot-data.html
table(data_all$Trait, data_all$Exposure_Type)
#colors: OF - "#56B4E9", MG - "#E69F00"
# prepare data for plotting
plotting_df <-
data_all %>%
group_by(Trait, Exposure_Type) %>%
summarise(Freq = n()) %>%
# a trick!
mutate(Freq = if_else(Exposure_Type == "One-off", -Freq, Freq))
## find the order of Traits by the N
temp_df <-
plotting_df %>%
filter(Exposure_Type == "One-off") %>%
arrange(Freq)
the_order <- rev(temp_df$Trait)
p_Trait <-
plotting_df %>%
ggplot(aes(x = Trait, y = Freq, group = Exposure_Type, fill = Exposure_Type)) +
geom_bar(stat = "identity", width = 0.5) +
coord_flip() +
scale_x_discrete(limits = the_order) + #used ordered Traits - use for single axis
scale_y_continuous(breaks = seq(-200, 200, 50),
labels = abs(seq(-200, 200, 50)), limits = c(-210, 210)) +
labs(x = "Trait", y = "N effect sizes", title = "Number of effect sizes by Trait") +
theme(legend.position = "bottom",
legend.title = element_blank(),
plot.title = element_text(hjust = 0.5),
panel.background = element_rect(fill =  "white"),
panel.grid.major.x = element_line("grey")) +
scale_fill_manual(values=c("#56B4E9", "#E69F00"),   # change the default colors of bars
name="",
breaks=c("One-off", "Multigenerational"),
labels=c("One-off", "Multigenerational"))
print(p_Trait)
knitr::opts_chunk$set(echo = FALSE)
options(scipen=100)
# Load packages
# devtools::install_github("thomasp85/patchwork")
pacman::p_load(tidyverse, # tidy family and related pacakges below
metafor, # calculating effect sizes
magrittr, # extending piping
ggplot2,  # nice plots
patchwork,  # arranging plots
bbmle, # for AICtab
here, # help loading and saving
)
#Load environment
#load(here('myEnvironment.RData'))
# Load custom functions
#source("./Scripts/custom_functions.R") #load custom functions
# Load preprocessed data with effect sizes
data_all <- read.csv(file =here("Data", "data_all_ES.csv"))
#load(data_all, file = "./Rdata/data_all_ES.RData") #alternative
#str(data_all)
# Subset by One off and Multigenerational
data_MG <- filter(data_all, Exposure_Type == "Multigenerational")
data_OF <- filter(data_all, Exposure_Type == "One-off")
dim(data_MG)
dim(data_OF)
data_MG <- droplevels(data_MG) #adjust factor levels
data_OF <- droplevels(data_OF) #adjust factor levels
## all data
Vmat_lnRR_all <- make_VCV_matrix(data = data_all, V = "VlnRR", cluster = "Cohort_ID_Control", obs = "ES_ID")
knitr::opts_chunk$set(echo = FALSE)
options(scipen=100)
# Load packages
# devtools::install_github("thomasp85/patchwork")
pacman::p_load(tidyverse, # tidy family and related pacakges below
metafor, # calculating effect sizes
magrittr, # extending piping
ggplot2,  # nice plots
patchwork,  # arranging plots
bbmle, # for AICtab
here, # help loading and saving
)
#Load environment
#load(here('myEnvironment.RData'))
# Load custom functions
#source("./Scripts/custom_functions.R") #load custom functions
# Load preprocessed data with effect sizes
data_all <- read.csv(file =here("Data", "data_all_ES.csv"))
#load(data_all, file = "./Rdata/data_all_ES.RData") #alternative
#str(data_all)
# Subset by One off and Multigenerational
data_MG <- filter(data_all, Exposure_Type == "Multigenerational")
data_OF <- filter(data_all, Exposure_Type == "One-off")
dim(data_MG)
dim(data_OF)
data_MG <- droplevels(data_MG) #adjust factor levels
data_OF <- droplevels(data_OF) #adjust factor levels
## all data
Vmat_lnRR_all <- make_VCV_matrix(data = data_all, V = "VlnRR", cluster = "Cohort_ID_Control", obs = "ES_ID")
# Load custom functions
source("./Scripts/custom_functions.R") #load custom functions
# Load custom functions
source("../Scripts/custom_functions.R") #load custom functions
knitr::opts_chunk$set(echo = FALSE)
options(scipen=100)
# Load packages
# devtools::install_github("thomasp85/patchwork")
pacman::p_load(tidyverse, # tidy family and related pacakges below
metafor, # calculating effect sizes
magrittr, # extending piping
ggplot2,  # nice plots
patchwork,  # arranging plots
bbmle, # for AICtab
here, # help loading and saving
)
#Load environment
#load(here('myEnvironment.RData'))
# Load custom functions
source("../Scripts/custom_functions.R") #load custom functions
# Load preprocessed data with effect sizes
data_all <- read.csv(file =here("Data", "data_all_ES.csv"))
#load(data_all, file = "./Rdata/data_all_ES.RData") #alternative
#str(data_all)
# Subset by One off and Multigenerational
data_MG <- filter(data_all, Exposure_Type == "Multigenerational")
data_OF <- filter(data_all, Exposure_Type == "One-off")
dim(data_MG)
dim(data_OF)
data_MG <- droplevels(data_MG) #adjust factor levels
data_OF <- droplevels(data_OF) #adjust factor levels
## all data
Vmat_lnRR_all <- make_VCV_matrix(data = data_all, V = "VlnRR", cluster = "Cohort_ID_Control", obs = "ES_ID")
Vmat_lnCVR_all <- make_VCV_matrix(data = data_all, V = "VlnCVR", cluster = "Cohort_ID_Control", obs = "ES_ID")
## OF data
Vmat_lnRR_OF <- make_VCV_matrix(data = data_OF, V = "VlnRR", cluster = "Cohort_ID_Control", obs = "ES_ID")
Vmat_lnCVR_OF <- make_VCV_matrix(data = data_OF, V = "VlnCVR", cluster = "Cohort_ID_Control", obs = "ES_ID")
## MG data
Vmat_lnRR_MG <- make_VCV_matrix(data = data_MG, V = "VlnRR", cluster = "Cohort_ID_Control", obs = "ES_ID")
Vmat_lnCVR_MG <- make_VCV_matrix(data = data_MG, V = "VlnCVR", cluster = "Cohort_ID_Control", obs = "ES_ID")
#Vmat_lnRR_all #visual check
## OF dataset
MA_0 <- rma.mv(lnRR, VlnRR, data = data_OF, method = 'ML')
MA_1 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|ES_ID), data = data_OF, method = 'ML')
anova(MA_0, MA_1) #simple comparison of two  models
MA_2 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|Cohort_ID, ~1|ES_ID), data = data_OF, method = 'ML')
MA_3 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML')
MA_4 <- rma.mv(lnRR, VlnRR, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML')
MA_4_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix
MA_5_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Strain, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Strain
MA_6_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Type, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Type
MA_7_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Type, ~1|Rodent_Strain, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Type and Rodent_Strain
MA_8_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Type, ~1|Rodent_Strain, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Type and Rodent_Strain, without Cohort_ID
MA_9_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Strain, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Strain, without Cohort_ID and Rodent_Type
MA_10_Vmat <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Type, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_OF, method = 'ML') #with VCV matrix and Rodent_Strain, without Cohort_ID and Rodent_Strain
#compare models using AIC:
AICtab(MA_0, MA_1, MA_2, MA_3, MA_4, MA_4_Vmat, MA_5_Vmat, MA_6_Vmat, MA_7_Vmat, MA_8_Vmat, MA_9_Vmat, MA_10_Vmat) #MA_9_Vmat best, MA_5_Vmat and MA_8_Vmat very similar
## MG dataset
MA_0 <- rma.mv(lnRR, VlnRR, data = data_MG, method = 'ML')
MA_1 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|ES_ID), data = data_MG, method = 'ML')
anova(MA_0, MA_1) #simple comparison of two  models
MA_2 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|Cohort_ID, ~1|ES_ID), data = data_MG, method = 'ML')
MA_3 <- rma.mv(lnRR, VlnRR, random = list(~1|Paper_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML')
MA_4 <- rma.mv(lnRR, VlnRR, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML')
MA_4_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML')#with VCV matrix
MA_5_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Strain, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Strain
MA_6_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Type, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Type
MA_7_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Type, ~1|Rodent_Strain, ~1|Study_ID, ~1|Cohort_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Type and Rodent_Strain
MA_8_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Type, ~1|Rodent_Strain, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Type and Rodent_Strain, without Cohort_ID
MA_9_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Strain, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Strain, without Cohort_ID and Rodent_Type
MA_10_Vmat <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Type, ~1|Study_ID, ~1|Trait, ~1|ES_ID), data = data_MG, method = 'ML') #with VCV matrix and Rodent_Strain, without Cohort_ID and Rodent_Strain
#compare models using AIC:
AICtab(MA_0, MA_1, MA_2, MA_3, MA_4, MA_4_Vmat, MA_5_Vmat, MA_6_Vmat, MA_7_Vmat, MA_8_Vmat, MA_9_Vmat, MA_10_Vmat) #MA_9_Vmat and MA_10_Vmat and MA_4_Vmat best, but MA_5_Vmat and MA_6_Vmat and MA_8_Vmat very similar
#use: random = list(~1|Rodent_Strain, ~1|Study_ID, ~1|Trait, ~1|ES_ID) #MA_9_Vmat
## OF data - lnRR random-effect model with VCV
MA_OF_lnRR <- rma.mv(lnRR, Vmat_lnRR_OF, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MA_OF_lnRR)
I2(MA_OF_lnRR, method = "S")
save(MA_OF_lnRR, file = here("Rdata/MA_OF_lnRR.Rdata"))
## OF data - lnCVR random-effect model with VCV
MA_OF_lnCVR <- rma.mv(lnCVR, Vmat_lnCVR_OF, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MA_OF_lnCVR)
I2(MA_OF_lnCVR, method = "S")
save(MA_OF_lnCVR, file = here("Rdata/MA_OF_lnCVR.Rdata"))
## MG data - lnRR random-effect model with VCV
MA_MG_lnRR <- rma.mv(lnRR, Vmat_lnRR_MG, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MA_MG_lnRR)
I2(MA_MG_lnRR, method = "S")
save(MA_MG_lnRR, file = here("Rdata/MA_MG_lnRR.Rdata"))
## MG data - lnCvR random-effect model with VCV
MA_MG_lnCVR <- rma.mv(lnCVR, Vmat_lnCVR_MG, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MA_MG_lnCVR)
I2(MA_MG_lnCVR, method = "S")
save(MA_MG_lnCVR, file = here("Rdata/MA_MG_lnCVR.Rdata"))
## lnRR
MR_all_ExpT_lnRR <- rma.mv(lnRR, Vmat_lnRR_all, mods= ~Exposure_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_all, method = "REML")
summary(MR_all_ExpT_lnRR)
save(MR_all_ExpT_lnRR, file = "../Rdata/MR_all_ExpT_lnRR.Rdata")
## lnRR - intercepts
MR_all_ExpT_lnRRi <- rma.mv(lnRR, Vmat_lnRR_all, mods= ~Exposure_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_all, method = "REML")
summary(MR_all_ExpT_lnRRi)
save(MR_all_ExpT_lnRRi, file = "../Rdata/MR_all_ExpT_lnRRi.Rdata")
R2(MR_all_ExpT_lnRR)
## lnCVR
MR_all_ExpT_lnCVR <- rma.mv(lnCVR, Vmat_lnCVR_all, mods= ~Exposure_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_all, method = "REML")
summary(MR_all_ExpT_lnCVR)
save(MR_all_ExpT_lnCVR, file = "../Rdata/MR_all_ExpT_lnCVR.Rdata")
## lnCVR - intercepts
MR_all_ExpT_lnCVRi <- rma.mv(lnCVR, Vmat_lnCVR_all, mods= ~Exposure_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_all, method = "REML")
summary(MR_all_ExpT_lnCVRi)
save(MR_all_ExpT_lnCVRi, file = "../Rdata/MR_all_ExpT_lnCVRi.Rdata")
R2(MR_all_ExpT_lnCVR)
#funnel(MR_all_ExpT_lnRR, yaxis="seinv")
#funnel(MR_all_ExpT_lnCVR, yaxis="seinv")
#data_all %>% group_by(Exposure_Type) %>% count()
## OF lnRR - intercepts (both, rat and mouse)
MR_OF_Rodent_lnRRi <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRi)
save(MR_OF_Rodent_lnRRi, file = here("Rdata/MR_OF_Rodent_lnRRi.Rdata"))
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(data_OF$Rodent_Type, ref="Rat"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
View(data_all)
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(data_OF$Rodent_Type, ref="Rat"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
View(data_OF)
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(data_OF$Rodent_Type, ref="Mouse"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRi)
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(data_OF$Rodent_Type, ref="Rat"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(Rodent_Type, ref="Rat"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
## OF lnCVR - intercepts (both, rat and mouse)
MR_OF_Rodent_lnCVRi <- rma.mv(lnCVR, Vmat_lnCVR_OF, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnCVRi)
## OF lnCVR - ref rat
MR_OF_Rodent_lnCVRr <- rma.mv(lnCVR, Vmat_lnCVR_OF, mods= ~relevel(data_OF$Rodent_Type, ref="Rat"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
## OF lnRR - ref rat
MR_OF_Rodent_lnRRr <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRr)
MR_OF_Rodent_lnRRm <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRm)
save(MR_OF_Rodent_lnRRm, file = here("Rdata/MR_OF_Rodent_lnRRm.Rdata"))
MR_OF_Rodent_lnCVRm <- rma.mv(lnCVR, Vmat_lnCVR_OF, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnCVRm)
save(MR_OF_Rodent_lnCVRm, file = here("Rdata/MR_OF_Rodent_lnCVRm.Rdata"))
MR_MG_Rodent_lnRRm <- rma.mv(lnRR, Vmat_lnRR_MG, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MR_MG_Rodent_lnRRm)
save(MR_MG_Rodent_lnRRm, file = here("Rdata/MR_MG_Rodent_lnRRm.Rdata"))
## OF lnRR - intercepts (both, rat and mouse)
MR_OF_Rodent_lnRRi <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRi)
save(MR_OF_Rodent_lnRRi, file = here("Rdata/MR_OF_Rodent_lnRRi.Rdata"))
## OF lnRR - ref mouse
MR_OF_Rodent_lnRRm <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnRRm)
save(MR_OF_Rodent_lnRRm, file = here("Rdata/MR_OF_Rodent_lnRRm.Rdata"))
R2(MR_OF_Rodent_lnRRi)
## OF lnCVR - intercepts (both, rat and mouse)
MR_OF_Rodent_lnCVRi <- rma.mv(lnCVR, Vmat_lnCVR_OF, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnCVRi)
save(MR_OF_Rodent_lnCVRi, file = here("Rdata/MR_OF_Rodent_lnCVRi.Rdata"))
## OF lnCVR - ref mouse
MR_OF_Rodent_lnCVRm <- rma.mv(lnCVR, Vmat_lnCVR_OF, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_Rodent_lnCVRm)
save(MR_OF_Rodent_lnCVRm, file = here("Rdata/MR_OF_Rodent_lnCVRm.Rdata"))
R2(MR_OF_Rodent_lnCVRi)
## MG lnRR - intercepts (Rat, Mouse)
MR_MG_Rodent_lnRRi <- rma.mv(lnRR, Vmat_lnRR_MG, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MR_MG_Rodent_lnRRi)
save(MR_MG_Rodent_lnRRi, file = here("Rdata/MR_MG_Rodent_lnRRi.Rdata"))
## MG lnRR - ref mouse
MR_MG_Rodent_lnRRm <- rma.mv(lnRR, Vmat_lnRR_MG, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MR_MG_Rodent_lnRRm)
save(MR_MG_Rodent_lnRRm, file = here("Rdata/MR_MG_Rodent_lnRRm.Rdata"))
R2(MR_MG_Rodent_lnRRi)
## MG lnCVR - intercepts (Rat, Mouse)
MR_MG_Rodent_lnCVRi <- rma.mv(lnCVR, Vmat_lnCVR_MG, mods= ~Rodent_Type - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MR_MG_Rodent_lnCVRi)
save(MR_MG_Rodent_lnCVRi, file = here("Rdata/MR_MG_Rodent_lnCVRi.Rdata"))
## MG lnCVR - ref mouse
MR_MG_Rodent_lnCVRm <- rma.mv(lnCVR, Vmat_lnCVR_MG, mods= ~Rodent_Type, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_MG, method = "REML")
summary(MR_MG_Rodent_lnCVRm)
save(MR_MG_Rodent_lnCVRm, file = here("Rdata/MR_MG_Rodent_lnCVRm.Rdata"))
R2(MR_MG_Rodent_lnCVRi)
## OF lnRR - intercepts (both, female, male)
MR_OF_ExpSex_lnRRi <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~F0_Parent_Exposed - 1, random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
summary(MR_OF_ExpSex_lnRRi)
save(MR_OF_ExpSex_lnRRi, file = "../Rdata/MR_OF_ExpSex_lnRRi.Rdata")
## OF lnRR - ref female
MR_OF_ExpSex_lnRRf <- rma.mv(lnRR, Vmat_lnRR_OF, mods= ~relevel(data_OF$F0_Parent_Exposed, ref="Female"), random = list(~1|Rodent_Strain, ~1|Study_ID,  ~1|Trait, ~1|ES_ID), data = data_OF, method = "REML")
